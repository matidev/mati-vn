/**
 * @author Tien Mai (matidev@outlook.com)
 * @version 1.0
 */

jQuery(function ($) {
    // Enable tooltip
    $('[data-toggle="tooltip"]').tooltip();

    // Add anchor link
    $('.post-content').find('h2, h3, h4, h5, h6').filter('[id]').each(function () {
        $(this).html('<a href="#' + $(this).attr('id') + '" class="heading-anchor"><span><i class="fa fa-link"></i></span> ' + $(this).text() + '</a>');
    });

    // Auto height
    let blogMaxHeight = 0;
    $('.blog-list .blog-item').each(function (idx, el) {
        var height = $(el).outerHeight();

        if (height > blogMaxHeight) {
            blogMaxHeight = height;
        }
    });

    if (blogMaxHeight > 0) {
        $('.blog-list .blog-item').each(function (idx, el) {
            $(el).css('height', blogMaxHeight + 'px');
        });
    }

    // Content blocks
    let
        $cctvBlock = $('.cctv-block'),
        $toolsBlock = $('.tools-block'),
        $cvBlock = $('.cv-block')
    ;

    if ($cctvBlock.length) {
        const
            listPort = [8080, 8000, 554, 34567, 3389, 3399, 21, 22, 80, 443],
            errorMsg = 'Something went wrong! Please refresh this page and try again.',
            loading = '<i class="fa fa-spinner fa-pulse text-primary"></i>'
        ;

        let
            $cctvForm = $cctvBlock.find('#cctv-form'),
            $cctvIpAddr = $cctvForm.find('#ip-addr'),
            $cctvIpAddrDomain = $cctvForm.find('#ip-addr-domain'),
            $cctvBtnSubmit = $cctvForm.find('.btn-submit'),
            $cctvResultIp = $cctvBlock.find('.result-ip'),
            $cctvResultList = $cctvBlock.find('.result-list'),
            $cctvResultMsg = $cctvBlock.find('.result-msg'),
            $cctvProgressBar = $cctvBlock.find('.progress-bar'),
            mToken = '',
            checkOpenPort = function (idx) {
                let
                    ip = $cctvIpAddr.val(),
                    ports = listPort.length,
                    percent = (idx + 1) < ports ? ((100 / ports) * (idx + 1)) : 100,
                    port = listPort[idx]
                ;

                if (typeof ip !== 'undefined' && ip.length > 0 && typeof port !== 'undefined') {
                    $cctvBtnSubmit.addClass('checking');
                    $cctvResultList.append('<li class="list-group-item">' + loading + ' Checking ' + port + ' port...</li>');

                    $.ajax({
                        url: matiAPIBaseUrl + 'port',
                        dataType: 'json',
                        method: 'POST',
                        data: {
                            'ip': ip,
                            'port': port,
                            'token': mToken,
                        }
                    }).done(function (res) {
                        let ipPort = ip + ':' + port;

                        $cctvResultList.find('li').last().remove();

                        if (parseInt(res.status) === 1) {
                            $cctvResultList.append('<li class="list-group-item font-weight-bold">' +
                                '<a href="http://' + ipPort + '" target="_blank" class="">' + ipPort + '</a>' +
                                '<span class="float-right text-success">Opened <i class="fa fa-check-circle fa-fw"></i></span></li>');
                        } else {
                            $cctvResultList.append('<li class="list-group-item">' + ipPort +
                                '<span class="float-right text-danger">Closed <i class="fa fa-times-circle fa-fw"></i></span></li>');
                        }

                        NProgress.set(percent / 100);
                        $cctvProgressBar.addClass('progress-bar-striped progress-bar-animated')
                            .attr('aria-valuenow', percent).css('width', percent + '%');

                        if (percent === 100) {
                            NProgress.done();
                            $cctvProgressBar.removeClass('progress-bar-striped progress-bar-animated');
                            $cctvBtnSubmit.removeClass('checking');
                        }

                        checkOpenPort(idx + 1);
                    }).fail(function (jqXHR, status) {
                        $cctvResultMsg.html(errorMsg).removeClass('d-none').addClass('d-inline-block');
                        NProgress.done();
                        $cctvProgressBar.removeClass('progress-bar-striped progress-bar-animated').addClass('bg-danger')
                            .attr('aria-valuenow', 100).css('width', '100%');
                        $cctvBtnSubmit.removeClass('checking');
                        $cctvResultList.find('li').last().remove();
                        $cctvResultIp.html('');
                    });
                } else {
                    $cctvIpAddrDomain.attr('disabled', false);
                }
            },
            getIpAddress = function (ip) {
                ip = typeof ip !== 'undefined' && ip ? ip : '';

                $cctvResultList.html('');
                $cctvIpAddrDomain.attr('disabled', true);
                NProgress.start();
                $cctvProgressBar.addClass('progress-bar-striped progress-bar-animated')
                    .attr('aria-valuenow', 25).css('width', '25%');
                $.ajax({
                    url: matiAPIBaseUrl + 'ip',
                    dataType: 'json',
                    method: 'POST',
                    data: {
                        'addr': ip,
                    }
                }).done(function (res) {
                    let ipAddr = res.data.ipAddress,
                        ipInfo = res.data.ipInfo;

                    mToken = typeof res.data.token !== 'undefined' ? res.data.token : '';

                    $cctvIpAddr.val(ipAddr);
                    NProgress.done();
                    $cctvProgressBar.removeClass('progress-bar-striped progress-bar-animated')
                        .attr('aria-valuenow', 100).css('width', '100%');

                    if ($cctvIpAddrDomain.val() === '') {
                        $cctvIpAddrDomain.val(ipAddr);
                    }

                    $cctvResultIp.html('<li class="list-group-item">IP Address: <span class="float-right"><strong>' + ipAddr + '</strong></span></li>');
                    if (ipInfo) {
                        $cctvResultIp.append('<li class="list-group-item"><pre>' + JSON.stringify(ipInfo, null, 2) + '</pre></li>');
                    }

                    if (ip !== '') {
                        setTimeout(function () {
                            NProgress.start();
                            NProgress.set(0.01);
                            $cctvProgressBar.addClass('progress-bar-striped progress-bar-animated')
                                .attr('aria-valuenow', 1).css('width', '1%');
                            checkOpenPort(0);
                        }, 1000);
                    } else {
                        $cctvIpAddrDomain.attr('disabled', false);
                    }
                }).fail(function (jqXHR, status) {
                    $cctvResultMsg.html(errorMsg).removeClass('d-none').addClass('d-inline-block');
                    NProgress.done();
                    $cctvProgressBar.removeClass('progress-bar-striped progress-bar-animated').addClass('bg-danger')
                        .attr('aria-valuenow', 100).css('width', '100%');
                    $cctvBtnSubmit.addClass('checking');
                });
            }
        ;

        // Turn off automatic incrementing behavior
        NProgress.configure({
            minimum: 0.01,
            trickle: false
        });

        getIpAddress();

        $cctvForm.on('submit', function (e) {
            e.preventDefault();
            let ip = $cctvIpAddrDomain.val();

            getIpAddress(ip);
        });

        $cctvIpAddrDomain.on('click', function () {
            $(this).select();
        })

        $cctvBtnSubmit.on('click', function () {
            if (!$(this).hasClass('checking')) {
                $cctvForm.trigger('submit');
            }
        });
    }

    if ($toolsBlock.length) {
        let
            $toolsInput = $toolsBlock.find('#tool-input'),
            $toolsResult = $toolsBlock.find('#tool-result'),
            $toolStringResult = $toolsBlock.find('#tool-string-result'),
            $toolsCLResult = $toolsBlock.find('.cl-result'),
            generateString = function (length) {
                let charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
                    randomString = '';

                for (let i = 0; i < length; i++) {
                    let randomPoz = Math.floor(Math.random() * charSet.length);

                    randomString += charSet.substring(randomPoz, randomPoz + 1);
                }

                return randomString;
            },
            toolResultTpl = function (text, val, isInput) {
                if (typeof val === 'undefined') {
                    return 'N/A';
                }

                let html = '<div class="mb-2">';

                if (isInput) {
                    html += '<div class="input-group"><div class="input-group-prepend"><div class="input-group-text bg-white">' + text + '</div></div>' +
                        '<input type="text" class="form-control select-all" readonly value="' + val + '"></div>';
                } else {
                    html += text + ': <span class="float-right"><strong>' + val + '</strong></span>';
                }

                return html + '</div>';
            }
        ;

        $toolsInput.focus();
        setTimeout(function () {
            $toolsInput.trigger('input');
            $toolStringResult.html('');
            $toolStringResult.append(toolResultTpl('Random 16 characters', generateString(16), true));
            $toolStringResult.append(toolResultTpl('Random 32 characters', generateString(32), true));
            $toolStringResult.append(toolResultTpl('phpMyAdmin blowfish_secret', generatePassword(32, false, /[\w\d\?\-]/), true));
        }, 500);

        $toolsInput.on('input', function () {
            $toolsResult.html('');

            let value = $(this).val();
            if (typeof value !== 'undefined' && value !== '') {
                let valLength = value.length,
                    valLines = value.split(/\r|\r\n|\n/).length;

                $toolsCLResult.html(valLength + ' / ' + valLines);

                if (valLength <= 2048) {
                    $toolsResult.append(toolResultTpl('Random String (' + valLength + ')', generateString(valLength), true));
                    $toolsResult.append(toolResultTpl('URL Encode', encodeURIComponent(value), true));
                    $toolsResult.append(toolResultTpl('URL Decode', decodeURIComponent(value), true));
                }

                if (typeof window.btoa !== 'undefined' && typeof window.atob !== 'undefined') {
                    $toolsResult.append(toolResultTpl('Base64 Encode', window.btoa(value), true));

                    try {
                        $toolsResult.append(toolResultTpl('Base64 Decode', window.atob(value), true));
                    } catch (e) {
                    }
                }

                if (typeof CryptoJS !== 'undefined') {
                    if (typeof CryptoJS.MD5(value) !== 'undefined') {
                        $toolsResult.append(toolResultTpl('MD5 Encode', CryptoJS.MD5(value), true));
                    }
                }

                $toolsResult.removeClass('d-none');
            } else {
                $toolsResult.addClass('d-none');
                $toolsCLResult.html(0 + ' / ' + 0);
            }
        });

        $toolsBlock.delegate('.select-all', 'click', function () {
            $(this).select();
        });
    }

    if ($cvBlock.length) {
        let
            getToken = function () {
                var url = window.location.href,
                    token = '';

                (url + '?').split('?')[1].split('&').forEach(function (pair) {
                    pair = (pair + '=').split('=').map(decodeURIComponent);
                    if (pair[0].length && pair[0] === 'token') {
                        token = pair[1];
                        return;
                    }
                });

                return token;
            },
            token = getToken(),
            html = '<div class="alert alert-success d-lg-inline-block" role="alert">\n' +
                '    <p>Thanks for interested in my Curriculum Vitae (CV).</p>\n' +
                '    <p>Unfortunately, the CV does not exists or token is expired.</p>\n' +
                '</div>';
        ;

        if (typeof token !== 'undefined' && token !== '' && token.length > 1 && token.length <= 32) {
            NProgress.start();
            $.ajax({
                url: matiAPIBaseUrl + 'cv',
                dataType: 'json',
                method: 'POST',
                data: {
                    'token': token,
                }
            }).done(function (res) {
                NProgress.done();
                $cvBlock.html(res.data.html);
            }).fail(function (jqXHR, status) {
                NProgress.done();
                $cvBlock.html(html);
            });
        } else {
            $cvBlock.html(html);
        }
    }
});
